{"version":3,"sources":["icecube/Utils.tsx","icecube/GameStore.ts","icecube/GameCache.tsx","icecube/Cube.tsx","icecube/Level.tsx","icecube/ThreeOrbitControls.tsx","icecube/Animation.tsx","icecube/GameControls.tsx","icecube/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Constants","useKey","key","React","pressed","setPressed","console","log","match","event","toLowerCase","onDown","onUp","window","addEventListener","removeEventListener","Vector3","Quaternion","GameUtils","data","xMin","Math","floor","width","xMax","x","z","depth","uuid","uuidv4","type","position","rotation","identity","scale","one","selected","cubes","index","set","copy","blocks","length","playerPosition","forEach","zero","stateArray","selector","slice","vector3Zero","vector3One","vector3Left","left","vector3Up","up","initialLevelData","useGameStore","create","get","levelData","step","players","Array","from","generatePlayers","ground","generateGroundCubes","generateBlocksCubes","this","setCubeGeometry","geometry","cubeGeometry","setGroundMaterial","material","groundMaterial","setNormalMaterial","normalMaterial","setSpecialMaterial","specialMaterial","setSteelMaterial","steelMaterial","setBombMaterial","bombMaterial","containsGround","some","equals","containsBlock","groundAt","find","blockAt","getBomb","canExplode","cube","setLevelData","animation","reset","state","resetPlayers","resetGroundCubes","resetBlocksCubes","map","tryMovePlayer","direction","moveTo","vector3Offset","player","angle","MathUtils","degToRad","frames","vector3Lerp","quaternionSlerp","quaternionAxisAngle","duration","onFrame","value","onRest","placeBomb","indexOf","block","checks","pushIfValid","push","current","shift","replaceStateArrayItem","offset","y","to","start","clone","lerpVectors","axis","multiply","setFromAxisAngle","slerp","GameCache","props","s","useResource","cubeGeometryRef","groundMaterialRef","normalMaterialRef","specialMaterialRef","steelMaterialRef","bombMaterialRef","effectLoader","ref","args","color","transparent","wireframe","children","object","setter","Cube","mesh","setMaterial","useFrame","setRotationFromQuaternion","Level","extend","OrbitControls","ThreeOrbitControls","controls","useThree","camera","domElement","gl","update","Animation","useSpring","config","opacity","GameControls","wPressed","aPressed","sPressed","dPressed","spacePressed","escapePressed","Game","App","className","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c7da8d6d.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Vector3, Quaternion } from 'three';\nimport { v4 as uuidv4 } from 'uuid';\nimport { CubeProps } from './Cube';\nimport { LevelData } from './LevelData';\n\nexport class Constants {\n  static Vector3 = {\n    get zero() { return new Vector3(0, 0, 0); },\n    get one() { return new Vector3(1, 1, 1); },\n    get up() { return new Vector3(0, 1, 0); },\n    get down() { return new Vector3(0, -1, 0); },\n    get left() { return new Vector3(-1, 0, 0); },\n    get right() { return new Vector3(1, 0, 0); },\n    get forward() { return new Vector3(0, 0, -1); },\n    get back() { return new Vector3(0, 0, 1); }\n  };\n  static Quaternion = {\n    get identity() { return new Quaternion(0, 0, 0, 1); }\n  };\n}\n\nexport function useKey(key: string) {\n  const [pressed, setPressed] = React.useState(false);\n\n  React.useEffect(() => {\n    console.log('[useKey] useEffect');\n\n    // Does an event match the key we're watching?\n    const match = (event: KeyboardEvent) => key.toLowerCase() === event.key.toLowerCase();\n\n    // Event handlers\n    const onDown = (event: KeyboardEvent) => {\n      if (match(event)) setPressed(true);\n    }\n\n    const onUp = (event: KeyboardEvent) => {\n      if (match(event)) setPressed(false);\n    }\n\n    window.addEventListener(\"keydown\", onDown);\n    window.addEventListener(\"keyup\", onUp);\n\n    return () => {\n      window.removeEventListener(\"keydown\", onDown);\n      window.removeEventListener(\"keyup\", onUp);\n    }\n  }, [key, setPressed]);\n\n  return pressed;\n}\n\nexport class GameUtils {\n  static *generateGroundCubes(data: LevelData): Generator<CubeProps, void, unknown> {\n    const xMin = -Math.floor(data.width / 2);\n    const xMax = xMin + data.width;\n\n    for (let x = xMin; x < xMax; x++) {\n      for (let z = 0; z < data.depth; z++) {\n        yield {\n          uuid: uuidv4(),\n          type: 'gr',\n          position: new Vector3(x, 0, -z),\n          rotation: Constants.Quaternion.identity,\n          scale: Constants.Vector3.one,\n          selected: false\n        };\n      }\n    }\n  }\n\n  static resetGroundCubes(data: LevelData, cubes: CubeProps[]) {\n    const xMin = -Math.floor(data.width / 2);\n    const xMax = xMin + data.width;\n    let index = 0;\n\n    for (let x = xMin; x < xMax; x++) {\n      for (let z = 0; z < data.depth; z++) {\n        cubes[index].position.set(x, 0, -z);\n        cubes[index].rotation.copy(Constants.Quaternion.identity);\n        cubes[index].scale.copy(Constants.Vector3.one);\n        index++;\n      }\n    }\n  }\n\n  static *generateBlocksCubes(data: LevelData): Generator<CubeProps, void, unknown> {\n    const xMin = -Math.floor(data.width / 2);\n\n    for (let z = 0; z < data.blocks.length; z++) {\n      for (let x = 0; x < data.blocks[z].length; x++) {\n        yield {\n          uuid: uuidv4(),\n          type: data.blocks[z][x],\n          position: new Vector3(xMin + x, 0, -(data.depth - 1 - z)),\n          rotation: Constants.Quaternion.identity,\n          scale: Constants.Vector3.one,\n          selected: false\n        };\n      }\n    }\n  }\n\n  static resetBlocksCubes(data: LevelData, cubes: CubeProps[]) {\n    const xMin = -Math.floor(data.width / 2);\n    let index = 0;\n\n    for (let z = 0; z < data.blocks.length; z++) {\n      for (let x = 0; x < data.blocks[z].length; x++) {\n        cubes[index].position.set(xMin + x, 0, -(data.depth - 1 - z));\n        cubes[index].rotation.copy(Constants.Quaternion.identity);\n        cubes[index].scale.copy(Constants.Vector3.one);\n        index++;\n      }\n    }\n  }\n\n  static *generatePlayers(data: LevelData): Generator<CubeProps, void, unknown> {\n    yield {\n      uuid: uuidv4(),\n      type: 'pl',\n      position: new Vector3(data.playerPosition[0], data.playerPosition[1], data.playerPosition[2]),\n      rotation: Constants.Quaternion.identity,\n      scale: Constants.Vector3.one,\n      selected: false\n    };\n  }\n\n  static resetPlayers(cubes: CubeProps[]) {\n    cubes.forEach(x => {\n      x.position.copy(Constants.Vector3.zero);\n      x.rotation.copy(Constants.Quaternion.identity);\n      x.scale.copy(Constants.Vector3.one);\n    });\n  }\n\n  static replaceStateArrayItem<T>(stateArray: T[], index: number, selector: (item: T) => T) {\n    return [\n      ...stateArray.slice(0, index),\n      selector(stateArray[index]),\n      ...stateArray.slice(index + 1)\n    ];\n  }\n}","import { BoxBufferGeometry, MeshStandardMaterial, Vector3, Quaternion, MathUtils } from 'three';\nimport create from 'zustand'\nimport { LevelData } from './LevelData';\nimport { AnimationProps } from './Animation';\nimport { CubeProps } from './Cube';\nimport { GameUtils, Constants } from './Utils';\n\nexport type GameStoreType = {\n  levelData: LevelData;\n  step: number;\n  players: CubeProps[];\n  ground: CubeProps[];\n  blocks: CubeProps[];\n  player: CubeProps;\n  animation?: AnimationProps;\n\n  cubeGeometry?: BoxBufferGeometry;\n  groundMaterial?: MeshStandardMaterial;\n  normalMaterial?: MeshStandardMaterial;\n  specialMaterial?: MeshStandardMaterial;\n  steelMaterial?: MeshStandardMaterial;\n  bombMaterial?: MeshStandardMaterial;\n\n  setCubeGeometry: (geometry: BoxBufferGeometry) => void;\n  setGroundMaterial: (material: MeshStandardMaterial) => void;\n  setNormalMaterial: (material: MeshStandardMaterial) => void;\n  setSpecialMaterial: (material: MeshStandardMaterial) => void;\n  setSteelMaterial: (material: MeshStandardMaterial) => void;\n  setBombMaterial: (material: MeshStandardMaterial) => void;\n\n  containsGround: (position: Vector3) => boolean;\n  containsBlock: (position: Vector3) => boolean;\n  groundAt: (position: Vector3) => CubeProps;\n  blockAt: (position: Vector3) => CubeProps;\n  getBomb: () => CubeProps | undefined;\n  canExplode: (cube: CubeProps) => boolean;\n\n  setLevelData: (data: LevelData) => void;\n  reset: () => void;\n  tryMovePlayer: (direction: [number, number, number]) => boolean;\n  placeBomb: () => boolean;\n};\n\nconst vector3Zero = Constants.Vector3.zero;\nconst vector3One = Constants.Vector3.one;\nconst vector3Left = Constants.Vector3.left;\nconst vector3Up = Constants.Vector3.up;\nconst initialLevelData: LevelData = {\n  width: 5,\n  depth: 10,\n  playerPosition: [0, 0, 0],\n  blocks: [\n    ['no', 'no', 'no', 'no', 'no'],\n    ['st', 'sp', 'no', 'st', 'st']\n  ]\n};\n\nexport const useGameStore = create<GameStoreType>((set, get) => ({\n  levelData: initialLevelData,\n  step: 2,\n  players: Array.from(GameUtils.generatePlayers(initialLevelData)),\n  ground: Array.from(GameUtils.generateGroundCubes(initialLevelData)),\n  blocks: Array.from(GameUtils.generateBlocksCubes(initialLevelData)),\n  get player() { return this.players[0]; },\n\n  setCubeGeometry: (geometry: BoxBufferGeometry) => set({ cubeGeometry: geometry }),\n  setGroundMaterial: (material: MeshStandardMaterial) => set({ groundMaterial: material }),\n  setNormalMaterial: (material: MeshStandardMaterial) => set({ normalMaterial: material }),\n  setSpecialMaterial: (material: MeshStandardMaterial) => set({ specialMaterial: material }),\n  setSteelMaterial: (material: MeshStandardMaterial) => set({ steelMaterial: material }),\n  setBombMaterial: (material: MeshStandardMaterial) => set({ bombMaterial: material }),\n\n  containsGround: (position: Vector3) => get().ground.some(x => x.position.equals(position) && x.scale.equals(vector3One)),\n  containsBlock: (position: Vector3) => get().blocks.some(x => x.position.equals(position) && x.scale.equals(vector3One)),\n  groundAt: (position: Vector3) => get().ground.find(x => x.position.equals(position) && x.scale.equals(vector3One))!,\n  blockAt: (position: Vector3) => get().blocks.find(x => x.position.equals(position) && x.scale.equals(vector3One))!,\n  getBomb: () => get().ground.find(x => x.selected),\n  canExplode: (cube: CubeProps) => cube.type !== 'st',\n\n  setLevelData: (data: LevelData) => {\n    set({\n      levelData: data,\n      step: 2,\n      players: Array.from(GameUtils.generatePlayers(data)),\n      ground: Array.from(GameUtils.generateGroundCubes(data)),\n      blocks: Array.from(GameUtils.generateBlocksCubes(data)),\n      animation: null!\n    });\n  },\n\n  reset: () => {\n    const state = get();\n    GameUtils.resetPlayers(state.players);\n    GameUtils.resetGroundCubes(state.levelData, state.ground);\n    GameUtils.resetBlocksCubes(state.levelData, state.blocks);\n    set({\n      step: 2,\n      players: state.players.map(x => ({ ...x, selected: false })),\n      ground: state.ground.map(x => ({ ...x, selected: false })),\n      blocks: state.blocks.map(x => ({ ...x, selected: false })),\n      animation: null!\n    });\n  },\n\n  tryMovePlayer: (direction: [number, number, number]) => {\n    const state = get();\n    const moveTo = vector3Offset(state.player.position, direction);\n    if (state.containsGround(moveTo) && !state.containsBlock(moveTo)) {\n      const step = state.step - 1;\n      const angle = MathUtils.degToRad(-90);\n      const frames = step !== 0\n        ? [vector3Lerp(state.player.position, moveTo)]\n        : [\n          vector3Lerp(state.player.position, moveTo),\n          ...state.blocks.map(x => vector3Lerp(x.position, vector3Offset(x.position, [0, 0, 1]))),\n          ...state.blocks.map(x => quaternionSlerp(x.rotation, quaternionAxisAngle(x.rotation, vector3Left, angle)))\n        ];\n      set({\n        step: step === 0 ? 2 : step,\n        animation: {\n          duration: 250,\n          onFrame: (value: number) => frames.forEach(x => x(value)),\n          onRest: () => {\n            set({ animation: null! });\n            if (state.containsBlock(state.player.position)) {\n              state.reset();\n            }\n          }\n        }\n      });\n      return true;\n    }\n    return false;\n  },\n\n  placeBomb: () => {\n    const state = get();\n    const cube = state.getBomb() ?? state.groundAt(state.player.position);\n    const index = state.ground.indexOf(cube);\n    if (cube.selected) {\n      const block = state.blockAt(cube.position);\n      if (block && state.canExplode(block)) {\n        const blocks: CubeProps[] = [];\n        const checks = [block];\n        const pushIfValid = (cube: CubeProps) => {\n          if (cube && state.canExplode(cube)) {\n            checks.push(cube);\n          }\n        };\n        while (checks.length > 0) {\n          const current = checks.shift()!;\n          blocks.push(current);\n          if (current.type === 'sp') {\n            pushIfValid(state.blockAt(vector3Offset(block.position, [-1, 0, 0])));\n            pushIfValid(state.blockAt(vector3Offset(block.position, [1, 0, 0])));\n            pushIfValid(state.blockAt(vector3Offset(block.position, [0, 0, -1])));\n            pushIfValid(state.blockAt(vector3Offset(block.position, [0, 0, 1])));\n            pushIfValid(state.blockAt(vector3Offset(block.position, [-1, 0, -1])));\n            pushIfValid(state.blockAt(vector3Offset(block.position, [1, 0, -1])));\n            pushIfValid(state.blockAt(vector3Offset(block.position, [1, 0, -1])));\n            pushIfValid(state.blockAt(vector3Offset(block.position, [-1, 0, 1])));\n          }\n        }\n        const angle = MathUtils.degToRad(180);\n        const frames = [\n          ...blocks.map(x => vector3Lerp(x.scale, vector3Zero)),\n          ...blocks.map(x => quaternionSlerp(x.rotation, quaternionAxisAngle(x.rotation, vector3Up, angle)))\n        ];\n        set({\n          animation: {\n            duration: 250,\n            onFrame: (value: number) => frames.forEach(x => x(value)),\n            onRest: () => {\n              set({ animation: null! });\n            }\n          }\n        });\n      }\n    }\n    set({ ground: GameUtils.replaceStateArrayItem(state.ground, index, x => ({ ...x, selected: !x.selected })) });\n    return !cube.selected;\n  }\n}));\n\nfunction vector3Offset(from: Vector3, offset: [number, number, number]) {\n  return new Vector3(from.x + offset[0], from.y + offset[1], from.z + offset[2]);\n}\n\nfunction vector3Lerp(from: Vector3, to: Vector3) {\n  const start = from.clone();\n  return (value: number) => {\n    from.lerpVectors(start, to, value);\n  };\n}\n\nfunction quaternionAxisAngle(from: Quaternion, axis: Vector3, angle: number) {\n  return from.clone().multiply(new Quaternion().setFromAxisAngle(axis, angle));\n}\n\nfunction quaternionSlerp(from: Quaternion, to: Quaternion) {\n  const start = from.clone();\n  return (value: number) => {\n    Quaternion.slerp(start, to, from, value);\n  };\n}","import * as React from 'react';\nimport { BoxBufferGeometry, MeshStandardMaterial } from 'three';\nimport { useResource } from 'react-three-fiber';\nimport { useGameStore } from './GameStore';\n\nexport type GameCacheProps = React.PropsWithChildren<{}>;\n\nexport const GameCache = (props: GameCacheProps) => {\n  const setCubeGeometry = useGameStore(s => s.setCubeGeometry);\n  const setGroundMaterial = useGameStore(s => s.setGroundMaterial);\n  const setNormalMaterial = useGameStore(s => s.setNormalMaterial);\n  const setSpecialMaterial = useGameStore(s => s.setSpecialMaterial);\n  const setSteelMaterial = useGameStore(s => s.setSteelMaterial);\n  const setBombMaterial = useGameStore(s => s.setBombMaterial);\n  const [cubeGeometryRef, cubeGeometry] = useResource<BoxBufferGeometry>();\n  const [groundMaterialRef, groundMaterial] = useResource<MeshStandardMaterial>();\n  const [normalMaterialRef, normalMaterial] = useResource<MeshStandardMaterial>();\n  const [specialMaterialRef, specialMaterial] = useResource<MeshStandardMaterial>();\n  const [steelMaterialRef, steelMaterial] = useResource<MeshStandardMaterial>();\n  const [bombMaterialRef, bombMaterial] = useResource<MeshStandardMaterial>();\n  console.log('[GameCache] const');\n\n  React.useEffect(() => effectLoader(cubeGeometry, setCubeGeometry), [setCubeGeometry, cubeGeometry]);\n  React.useEffect(() => effectLoader(groundMaterial, setGroundMaterial), [setGroundMaterial, groundMaterial]);\n  React.useEffect(() => effectLoader(normalMaterial, setNormalMaterial), [setNormalMaterial, normalMaterial]);\n  React.useEffect(() => effectLoader(specialMaterial, setSpecialMaterial), [setSpecialMaterial, specialMaterial]);\n  React.useEffect(() => effectLoader(steelMaterial, setSteelMaterial), [setSteelMaterial, steelMaterial]);\n  React.useEffect(() => effectLoader(bombMaterial, setBombMaterial), [setBombMaterial, bombMaterial]);\n\n  return (\n    <React.Fragment>\n      <boxBufferGeometry ref={cubeGeometryRef} args={[1, 1, 1]} />\n      <meshStandardMaterial ref={groundMaterialRef} color=\"black\" transparent wireframe />\n      <meshStandardMaterial ref={normalMaterialRef} color=\"gray\" transparent />\n      <meshStandardMaterial ref={specialMaterialRef} color=\"green\" transparent />\n      <meshStandardMaterial ref={steelMaterialRef} color=\"black\" transparent />\n      <meshStandardMaterial ref={bombMaterialRef} color=\"orange\" transparent />\n      {cubeGeometry && groundMaterial && normalMaterial && specialMaterial && steelMaterial && bombMaterial && props.children}\n    </React.Fragment>\n  );\n};\n\nconst effectLoader = (object: any, setter: (arg: any) => void) => {\n  if (object) {\n    console.log('[GameCache] useEffect', object);\n    setter(object);\n  }\n};","import * as React from 'react';\nimport { Vector3, Mesh, Material, Quaternion } from 'three';\nimport { useGameStore } from './GameStore';\nimport { useFrame } from 'react-three-fiber';\n\nexport type CubeProps = {\n  uuid: string;\n  type: string;\n  position: Vector3;\n  rotation: Quaternion;\n  scale: Vector3;\n  selected: boolean;\n};\n\nexport const Cube = React.memo(({ type, position, rotation, scale, selected }: CubeProps) => {\n  const mesh = React.useRef<Mesh>(null!);\n  const [material, setMaterial] = React.useState<Material>(null!);\n  const cubeGeometry = useGameStore(s => s.cubeGeometry);\n  const groundMaterial = useGameStore(s => s.groundMaterial)!;\n  const normalMaterial = useGameStore(s => s.normalMaterial)!;\n  const specialMaterial = useGameStore(s => s.specialMaterial)!;\n  const steelMaterial = useGameStore(s => s.steelMaterial)!;\n  const bombMaterial = useGameStore(s => s.bombMaterial)!;\n  console.log('[Cube] const');\n\n  React.useEffect(() => {\n    console.log('[Cube] mount');\n    return () => console.log('[Cube] unmount');\n  }, []);\n\n  React.useEffect(() => {\n    if (selected) {\n      setMaterial(bombMaterial);\n    } else {\n      switch (type) {\n        case 'pl':\n        case 'no':\n          setMaterial(normalMaterial);\n          break;\n        case 'sp':\n          setMaterial(specialMaterial);\n          break;\n        case 'st':\n          setMaterial(steelMaterial);\n          break;\n        case 'gr':\n        default:\n          setMaterial(groundMaterial);\n          break;\n      }\n    }\n  }, [setMaterial, type, selected, cubeGeometry, groundMaterial, normalMaterial, specialMaterial, steelMaterial, bombMaterial]);\n\n  useFrame(() => {\n    mesh.current.position.copy(position);\n    mesh.current.setRotationFromQuaternion(rotation);\n    mesh.current.scale.copy(scale);\n  });\n\n  return (\n    <mesh\n      ref={mesh}\n      geometry={cubeGeometry}\n      material={material}\n    />\n  );\n});","import * as React from 'react';\nimport { useGameStore } from './GameStore';\nimport { Cube } from './Cube';\n\nexport const Level = () => {\n  const ground = useGameStore(s => s.ground);\n  const blocks = useGameStore(s => s.blocks);\n  const players = useGameStore(s => s.players);\n  console.log('[Level] const');\n\n  return (\n    <React.Fragment>\n      <group position={[0, -1, 0]}>\n        {ground.map(cube => (\n          <Cube key={cube.uuid} {...cube} />\n        ))}\n      </group>\n      {blocks.map(cube => (\n        <Cube key={cube.uuid} {...cube} />\n      ))}\n      {players.map(cube => (\n        <Cube key={cube.uuid} {...cube} />\n      ))}\n    </React.Fragment>\n  );\n};","import * as React from 'react';\nimport { extend, useThree, useFrame } from 'react-three-fiber';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nextend({ OrbitControls });\n\nexport const ThreeOrbitControls = () => {\n  const controls = React.useRef<OrbitControls>(null!);\n  const { camera, gl: { domElement } } = useThree();\n  console.log('[OrbitControlsElement] const');\n\n  useFrame(() => controls.current.update());\n\n  return (\n    <orbitControls\n      ref={controls}\n      args={[camera, domElement]}\n    />\n  );\n};","import * as React from 'react';\nimport { useSpring } from 'react-spring';\n\nexport type AnimationProps = {\n  duration: number;\n  onFrame: (value: number) => void;\n  onRest: () => void;\n};\n\nexport const Animation = React.memo(({ duration, onFrame, onRest }: AnimationProps) => {\n  console.log('[Animation] const');\n\n  useSpring({\n    config: { duration: duration },\n    from: { opacity: 0.0 },\n    to: { opacity: 1.0 },\n    reset: true,\n    onRest: onRest,\n    onFrame: (props: any) => onFrame(props.opacity)\n  });\n\n  return <React.Fragment />;\n});","import * as React from 'react';\nimport { useGameStore } from './GameStore';\nimport { Animation } from './Animation';\nimport { useKey } from './Utils';\n\nexport const GameControls = () => {\n  const tryMovePlayer = useGameStore(s => s.tryMovePlayer);\n  const placeBomb = useGameStore(s => s.placeBomb);\n  const reset = useGameStore(s => s.reset);\n  const animation = useGameStore(s => s.animation);\n  const wPressed = useKey('w');\n  const aPressed = useKey('a');\n  const sPressed = useKey('s');\n  const dPressed = useKey('d');\n  const spacePressed = useKey(' ');\n  const escapePressed = useKey('escape');\n\n  React.useEffect(() => {\n    const checkInput = () => {\n      if (wPressed && tryMovePlayer([0, 0, -1])) return;\n      if (aPressed && tryMovePlayer([-1, 0, 0])) return;\n      if (sPressed && tryMovePlayer([0, 0, 1])) return;\n      if (dPressed && tryMovePlayer([1, 0, 0])) return;\n      if (spacePressed) { placeBomb(); return; }\n      if (escapePressed) { reset(); return; }\n    };\n\n    if (!animation) {\n      checkInput();\n    }\n  }, [animation, wPressed, aPressed, sPressed, dPressed, spacePressed, escapePressed, tryMovePlayer, placeBomb, reset]);\n\n  return animation ? <Animation {...animation} /> : <React.Fragment />;\n};","import * as React from 'react';\nimport { Canvas } from 'react-three-fiber';\nimport { GameCache } from './GameCache';\nimport { Level } from './Level';\nimport { ThreeOrbitControls } from './ThreeOrbitControls';\nimport { GameControls } from './GameControls';\n\nexport const Game = () => {\n  console.log('[Game] const');\n\n  return (\n    <Canvas>\n      <ambientLight />\n      <pointLight position={[10, 10, 10]} />\n      <ThreeOrbitControls />\n      <GameControls />\n      <GameCache>\n        <Level />\n      </GameCache>\n    </Canvas>\n  );\n};","import React from 'react';\nimport { Game } from './icecube/Game';\n\nfunction App() {\n  return (\n    <div className=\"vh-100 vw-100\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}